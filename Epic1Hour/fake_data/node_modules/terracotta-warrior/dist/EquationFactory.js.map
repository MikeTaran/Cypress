{"version":3,"sources":["EquationFactory.js"],"names":[],"mappings":"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","file":"EquationFactory.js","sourcesContent":["/*\n * @Author: Lim Mingjie, Kenneth\n * @Date:   2015-05-23 21:54:18\n * @Last Modified by:   Lim Mingjie, Kenneth\n * @Last Modified time: 2015-05-26 13:32:13\n */\n\n'use strict';\n\nimport countBy from 'lodash/collection/countBy';\nimport RandEngine from './RandEngine';\nimport TextFactory from './TextFactory';\n\nconst defaultIntegralOperator = '\\\\int\\\\!';\nconst defaultTrigOperators = [\n  '\\\\sin',\n  '\\\\asin',\n  '\\\\cos',\n  '\\\\acos',\n  '\\\\tan',\n  '\\\\atan'\n];\n\nconst defaultFracOperator = '\\\\frac';\nconst defaultNumOperators = ['+', '-'];\n\nconst defaultEqualityOperators = [\n  '=',\n  '\\\\neq',\n  '\\\\Rightarrow',\n  '\\\\approx',\n  '\\\\equiv'\n];\n\nconst defaultSuperOperator = '^';\nconst defaultSubOperator = '_';\n\nconst defaultTradMathDispEnv = ['$$', '$$'];\nconst defaultTradMathInlineEnv = ['$', '$'];\n\nconst defaultModernMathDispEnv = ['\\[', '\\]'];\nconst defaultModernMathInlineEnv = ['\\(', '\\)'];\n\nexport default class {\n  constructor(options = {}) {\n    this.engine = options.engine || new RandEngine();\n    this.tf = new TextFactory({ engine: this.engine });\n\n    this.integralOperator = options.integralOperator || defaultIntegralOperator;\n    this.trigOperators = options.trigOperators || defaultTrigOperators;\n    this.fracOperator = options.fracOperator || defaultFracOperator;\n    this.numOperators = options.numOperators || defaultNumOperators;\n    this.equalityOperators = options.equalityOperators || defaultEqualityOperators;\n    this.superOperator = options.superOperator || defaultSuperOperator;\n    this.subOperator = options.subOperator || defaultSubOperator;\n\n    this.tradMathDispEnv = options.tradMathDispEnv || defaultTradMathDispEnv;\n    this.tradMathInlineEnv = options.tradMathInlineEnv || defaultTradMathInlineEnv;\n    this.modernMathDispEnv = options.modernMathDispEnv || defaultModernMathDispEnv;\n    this.modernMathInlineEnv = options.modernMathInlineEnv || defaultModernMathInlineEnv;\n  }\n\n  randTerm(size = this.engine.randRange(2, 4)) {\n    let variables = [];\n    let result = '';\n\n    // Generate a random coefficient for the term\n    let coeff = this.engine.randRange(1, 10);\n\n    // Generate a list of variables to use in the term\n    for (let i = 0; i < size; i++) {\n      variables.push(this.tf.randLetter());\n    }\n\n    // Count the number of occurrences of each variable and sort them by alphabetical order\n    let countedVariables = countBy(variables.sort());\n\n    // Group and apply the correct coefficients to variables that occur more than once\n    for (let item in countedVariables) {\n      if (countedVariables[item] > 1) {\n        result += item + this.superOperator + countedVariables[item];\n      } else {\n        result += item;\n      }\n    }\n\n    // If the generated coefficient is greater than 1, append it to the result before returning\n    if (coeff > 1) {\n      return coeff + result;\n    } else {\n      return result;\n    }\n  }\n\n  randExpression(size = this.engine.randRange(3, 5), sorted = true) {\n    let terms = [];\n    let result = '';\n\n    // Generate the requested number of terms in the expression\n    for (let i = 0; i < size; i++) {\n      terms.push(this.randTerm());\n    }\n\n    // Sort the terms by alphabetical order\n    if (sorted) { terms = terms.sort(); }\n\n    for (let i = 0; i < size; i++) {\n      if (i !== 0) {\n        result += this.engine.randFromArray(this.numOperators) + terms[i];\n      } else {\n        result += terms[i];\n      }\n    }\n\n    return result;\n  }\n\n  randFrac() {\n    // Generate the numerator of the fraction and encapsulate it\n    let numerator = \"{\" + this.randExpression() + \"}\";\n\n    // Generate the denominator of the fraction and encapsulate it\n    let denominator = \"{\" + this.randExpression() + \"}\";\n\n    // Combine results with the fraction operator\n    return this.fracOperator + numerator + denominator;\n  }\n\n  randIntegral(type = this.engine.randFromArray(['exp', 'frac'])) {\n    // Generate the lower and upper limits used with the command\n    let upperLimit = this.superOperator + this.randTerm(1);\n    let lowerLimit = this.subOperator + this.randTerm(1);\n\n    // Initialize a placeholder for the main term that follows the command\n    let mainTerm = null;\n\n    // Generate either an expression or a fraction with equal probability\n    switch (type) {\n      case 'exp':\n        mainTerm = this.randExpression();\n        break;\n      case 'frac':\n      default:\n        mainTerm = this.randFrac();\n        break;\n    }\n\n    // Combine everything and add an integration variable\n    return this.integralOperator + lowerLimit + upperLimit + \" \" + mainTerm + \" \\\\,d\" + this.randTerm(1);\n  }\n\n  randEquation(size = this.engine.randRange(3, 6)) {\n    let result = '';\n\n    for (let i = 0; i < size; i++) {\n      let currentTerm = null;\n      let diceRoll = this.engine.randRange(0, 2);\n\n      switch (diceRoll) {\n        case '0':\n          currentTerm = this.randFrac();\n          break;\n        case '1':\n          currentTerm = this.randIntegral();\n          break;\n        case '2':\n        default:\n          currentTerm = this.randExpression();\n          break;\n      }\n\n      if (i === 0) {\n        result += currentTerm;\n      } else {\n        result += \" \" + this.engine.randFromArray(this.equalityOperators) + \" \" + currentTerm;\n      }\n    }\n\n    return result;\n  }\n\n  wrapMath(eqn, opts = {}) {\n    // Establish defaults for the kind of wrapper used\n    let style = opts.style || 'traditional';\n    let mode = opts.mode || 'display';\n\n    // Initialize placeholders\n    let openEnv = null;\n    let closeEnv = null;\n\n    switch (mode) {\n      case 'inline':\n        switch (style) {\n          case 'modern':\n            openEnv = this.modernMathInlineEnv[0];\n            closeEnv = this.modernMathInlineEnv[1];\n            break;\n          case 'traditional':\n          default:\n            openEnv = this.tradMathInlineEnv[0];\n            closeEnv = this.tradMathInlineEnv[1];\n            break;\n        }\n        break;\n      case 'display':\n      default:\n        switch (style) {\n          case 'modern':\n            openEnv = this.modernMathDispEnv[0];\n            closeEnv = this.modernMathDispEnv[1];\n            break;\n          case 'traditional':\n          default:\n            openEnv = this.tradMathDispEnv[0];\n            closeEnv = this.tradMathDispEnv[1];\n            break;\n        }\n        break;\n    }\n\n    return openEnv + eqn + closeEnv;\n  }\n}"],"sourceRoot":"/source/"}